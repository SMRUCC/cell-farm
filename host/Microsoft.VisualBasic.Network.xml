<?xml version="1.0"?>
<doc>
<assembly>
<name>
Darwinism.IPC.Networking
</name>
</assembly>
<members>
<member name="T:Darwinism.IPC.Networking.Captcha">
 <summary>
 Generate CAPTCHA graphics that you can use on websites to help authenticate users.
 CAPTCHA is an abbreviation for Completely Automated Public Turing test to tell Computers and Humans Apart.
 This method uses images Of words Or numbers that are, In theory, distorted And jumbled enough so that an 
 optical character recognition program can't read them but a human should be able to do so easily.
 
 (http://www.codeproject.com/Articles/43390/CAPTCHA-Graphic-in-ASP-NET)
 </summary>
</member>
<member name="P:Darwinism.IPC.Networking.Captcha.CaptchaImage">
 <summary>
 返回给客户端的验证码图像
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.Captcha.CaptchaValue">
 <summary>
 保存在服务器的验证码字符串
 </summary>
 <returns></returns>
</member>
<member name="T:Darwinism.IPC.Networking.MediaTypes">
 <summary>
 Csv file reader for the csv file list on https://www.iana.org/assignments/media-types/media-types.xhtml
 
 + [application](https://www.iana.org/assignments/media-types/application.csv)
 + [audio](https://www.iana.org/assignments/media-types/audio.csv)
 + [font](https://www.iana.org/assignments/media-types/font.csv)
 + [example]()
 + [image](https://www.iana.org/assignments/media-types/image.csv)
 + [message](https://www.iana.org/assignments/media-types/message.csv)
 + [model](https://www.iana.org/assignments/media-types/model.csv)
 + [multipart](https://www.iana.org/assignments/media-types/multipart.csv)
 + [text](https://www.iana.org/assignments/media-types/text.csv)
 + [video](https://www.iana.org/assignments/media-types/video.csv)
 </summary>
</member>
<member name="T:Darwinism.IPC.Networking.HTTP.WebCrawling">
 <summary>
 只会爬取HTML
 </summary>
</member>
<member name="M:Darwinism.IPC.Networking.HTTP.WebCrawling.DownloadAllLinks(System.String,System.String,System.Boolean,System.String[],System.Int32)">
 <summary>
 Downloads all links on the target web page and save the files to directory specific by <paramref name="Downloads"/>
 </summary>
 <param name="url$"></param>
 <param name="Downloads$">Directory for save the download contents.</param>
 <returns>返回失败的页面的url</returns>
</member>
<member name="T:Darwinism.IPC.Networking.HTTP.WebSaveAs">
 <summary>
 只会保存当前页面的所有内容到指定的文件夹之中，只会保存js，css图像等其他非链接的对象
 </summary>
</member>
<member name="F:Darwinism.IPC.Networking.HTTP.WebSaveAs.CSSLink">
 <summary>
 Example as:
 
 ```html
 &lt;link rel="stylesheet" href="/vendor/source-code-pro/styles.css">
 ```
 </summary>
</member>
<member name="M:Darwinism.IPC.Networking.HTTP.WebSaveAs.SaveAs(System.String,System.String)">
 <summary>
 这个函数只支持静态内容的抓取
 </summary>
 <param name="url$"></param>
 <param name="DIR$"></param>
 <returns></returns>
</member>
<member name="T:Darwinism.IPC.Networking.HTTP.NetResponse">
 <summary>
 The following is a list of Hypertext Transfer Protocol (HTTP) response status codes. This includes codes from IETF internet standards 
 as well as other IETF RFCs, other specifications and some additional commonly used codes. The first digit of the status code specifies 
 one of five classes of response; the bare minimum for an HTTP client is that it recognises these five classes. The phrases used are the 
 standard examples, but any human-readable alternative can be provided. Unless otherwise stated, the status code is part of the HTTP/1.1 
 standard (RFC 7231).

 The Internet Assigned Numbers Authority (IANA) maintains the official registry Of HTTP status codes.

 Microsoft IIS sometimes uses additional Decimal Sub-codes To provide more specific information, but these are Not listed here.
 </summary>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_CONTINUTE">
 <summary>
 100 Continue |
 This means that the server has received the request headers, And that the client should proceed To send the request body 
 (In the Case Of a request For which a body needs To be sent; For example, a POST request). If the request body Is large, 
 sending it To a server When a request has already been rejected based upon inappropriate headers Is inefficient. 
 To have a server check If the request could be accepted based On the request's headers alone, a client must send Expect: 
 100-continue as a header in its initial request and check if a 100 Continue status code is received in response before 
 continuing (or receive 417 Expectation Failed and not continue).
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_SWITCHING_PROTOCOLS">
 <summary>
 101 Switching Protocols |
 This means the requester has asked the server To switch protocols And the server Is acknowledging that it will Do so.
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_PROCESSING">
 <summary>
 102 Processing (WebDAV; RFC 2518) |
 As a WebDAV request may contain many sub-requests involving file operations, it may take a long time to complete the request. 
 This code indicates that the server has received And Is processing the request, but no response Is available yet.[3] 
 This prevents the client from timing out And assuming the request was lost.
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_OK">
 <summary>
 200 OK |
 Standard response For successful HTTP requests. The actual response will depend On the request method used. In a Get request, 
 the response will contain an entity corresponding To the requested resource. In a POST request, the response will contain an 
 entity describing Or containing the result Of the action.
 (由于可能会修改附带一些其他的元素据信息，所以只读属性不会使用简写的形式的，而是需要重新生成新的对象实例以防止数据污染)
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_CREATED">
 <summary>
 201 Created |
 The request has been fulfilled And resulted In a New resource being created.
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_ACCEPTED">
 <summary>
 202 Accepted |
 The request has been accepted For processing, but the processing has Not been completed. The request might Or might Not eventually be acted upon, 
 As it might be disallowed When processing actually takes place.
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_NON_AUTH_INFO">
 <summary>
 203 Non-Authoritative Information (since HTTP/1.1) |
 The server successfully processed the request, but Is returning information that may be from another source.
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_NO_CONTENT">
 <summary>
 204 No Content |
 The server successfully processed the request, but Is Not returning any content.
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_RESET_CONTENT">
 <summary>
 205 Reset Content |
 The server successfully processed the request, but Is Not returning any content. Unlike a 204 response, this response requires that the requester reset the document view.
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_PARTIAL_CONTENT">
 <summary>
 206 Partial Content (RFC 7233) |
 The server Is delivering only part Of the resource (Byte serving) due To a range header sent by the client. 
 The range header Is used by HTTP clients To enable resuming Of interrupted downloads, Or split a download into multiple simultaneous streams.
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_MULTI_STATUS">
 <summary>
 207 Multi-Status (WebDAV; RFC 4918) |
 The message body that follows Is an XML message And can contain a number Of separate response codes, depending On how many Sub-requests were made.[4]
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_ALREADY_REPORTED">
 <summary>
 208 Already Reported (WebDAV; RFC 5842) |
 The members Of a DAV binding have already been enumerated In a previous reply To this request, And are Not being included again.
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_IM_USED">
 <summary>
 226 IM Used (RFC 3229) |
 The server has fulfilled a request For the resource, And the response Is a representation Of the result Of one Or more instance-manipulations applied To the current instance.[5]
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_MULTI_CHOICES">
 <summary>
 300 Multiple Choices |
 Indicates multiple options For the resource that the client may follow. It, For instance, could be used To present different 
 format options For video, list files With different extensions, Or word sense disambiguation.
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_MOVED_PERMANENTLY">
 <summary>
 301 Moved Permanently |
 This And all future requests should be directed to the given URI.
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_FOUND">
 <summary>
 302 Found |
 This Is an example of industry practice contradicting the standard. The HTTP/1.0 specification (RFC 1945) required the client 
 to perform a temporary redirect (the original describing phrase was "Moved Temporarily"),[6] but popular browsers implemented 
 302 with the functionality of a 303 See Other. Therefore, HTTP/1.1 added status codes 303 And 307 to distinguish between the 
 two behaviours.[7] However, some Web applications And frameworks use the 302 status code as if it were the 303.[8]
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_SEE_OTHER">
 <summary>
 303 See Other (since HTTP/1.1) |
 The response To the request can be found under another URI Using a Get method. When received In response To a POST (Or PUT/DELETE), 
 it should be assumed that the server has received the data And the redirect should be issued With a separate Get message.
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_NOT_MODIFIED">
 <summary>
 304 Not Modified (RFC 7232) |
 Indicates that the resource has Not been modified since the version specified by the request headers If-Modified-Since Or If-None-Match. 
 This means that there Is no need To retransmit the resource, since the client still has a previously-downloaded copy.
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_USE_PROXY">
 <summary>
 305 Use Proxy (since HTTP/1.1) |
 The requested resource Is only available through a proxy, whose address Is provided In the response. Many HTTP clients 
 (such As Mozilla[9] And Internet Explorer) Do Not correctly handle responses With this status code, primarily For security reasons.[10]
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_SWITCH_PROXY">
 <summary>
 306 Switch Proxy |
 No longer used. Originally meant "Subsequent requests should use the specified proxy."[11]
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_TEMP_REDIRECT">
 <summary>
 307 Temporary Redirect (since HTTP/1.1) |
 In this case, the request should be repeated with another URI; however, future requests should still use the original URI. 
 In contrast to how 302 was historically implemented, the request method Is Not allowed to be changed when reissuing the original request. 
 For instance, a POST request should be repeated using another POST request.[12]
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_PERMANENT_REDIRECT">
 <summary>
 308 Permanent Redirect (RFC 7538) |
 The request, and all future requests should be repeated Using another URI. 307 And 308 (As proposed) parallel the behaviours 
 Of 302 And 301, but Do Not allow the HTTP method To change. So, For example, submitting a form To a permanently redirected resource may Continue smoothly.[13]
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_RESUME_INCOMPLETE">
 <summary>
 308 Resume Incomplete (Google) |
 This code Is used In the Resumable HTTP Requests Proposal To Resume aborted PUT Or POST requests.[14]
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_BAD_REQUEST">
 <summary>
 400 Bad Request |
 The server cannot Or will Not process the request due To something that Is perceived To be a client Error (e.g., malformed request syntax, 
 invalid request message framing, Or deceptive request routing).[15]
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_UNAUTHORIZED">
 <summary>
 401 Unauthorized (RFC 7235) |
 Similar to 403 Forbidden, but specifically for use when authentication Is required And has failed Or has Not yet been provided. 
 The response must include a WWW-Authenticate header field containing a challenge applicable to the requested resource. 
 See Basic access authentication And Digest access authentication.(证书未认证)
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_PAYMENT_REQUIRED">
 <summary>
 402 Payment Required |
 Reserved for future use. The original intention was that this code might be used as part of some form of digital cash Or micropayment scheme, 
 but that has Not happened, And this code Is Not usually used. YouTube uses this status if a particular IP address has made excessive requests, 
 And requires the person to enter a CAPTCHA.[citation needed]
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_FORBIDDEN">
 <summary>
 403 Forbidden |
 The request was a valid request, but the server Is refusing To respond To it. Unlike a 401 Unauthorized response, authenticating will make no difference.
 (被封号了)
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_NOT_FOUND">
 <summary>
 404 Not Found |
 The requested resource could Not be found but may be available again In the future. Subsequent requests by the client are permissible.
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_METHOD_NOT_ALLOWED">
 <summary>
 405 Method Not Allowed |
 A request was made Of a resource Using a request method Not supported by that resource; For example, 
 Using Get On a form which requires data To be presented via POST, Or Using PUT On a read-only resource.
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_NOT_ACCEPTABLE">
 <summary>
 406 Not Acceptable |
 The requested resource Is only capable Of generating content Not acceptable according To the Accept headers sent In the request.
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_PROXY_AUTH_REQUIRED">
 <summary>
 407 Proxy Authentication Required (RFC 7235) |
 The client must first authenticate itself With the proxy.
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_REQUEST_TIMEOUT">
 <summary>
 408 Request Timeout |
 The server timed out waiting For the request. According To HTTP specifications: 
 "The client did not produce a request within the time that the server was prepared to wait. The client MAY repeat the request without modifications at any later time."
 (请求超时)
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_CONFLICT">
 <summary>
 409 Conflict |
 Indicates that the request could Not be processed because Of conflict In the request, such As an edit conflict In the Case Of multiple updates.
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_GONE">
 <summary>
 410 Gone |
 Indicates that the resource requested Is no longer available And will Not be available again. 
 This should be used When a resource has been intentionally removed And the resource should be purged. 
 Upon receiving a 410 status code, the client should Not request the resource again In the future. 
 Clients such As search engines should remove the resource from their indices.[16] Most use cases 
 Do Not require clients And search engines To purge the resource, And a "404 Not Found" may be used instead.
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_LENGTH_REQUIRED">
 <summary>
 411 Length Required |
 The request did Not specify the length Of its content, which Is required by the requested resource.
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_PRECONDITION_FAILED">
 <summary>
 412 Precondition Failed (RFC 7232) |
 The server does Not meet one Of the preconditions that the requester put On the request.
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_PAYLOAD_TOO_LARGE">
 <summary>
 413 Payload Too Large (RFC 7231) |
 The request Is larger than the server Is willing Or able To process. Called "Request Entity Too Large " previously.
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_URI_TOO_LONG">
 <summary>
 414 Request-URI Too Long |
 The URI provided was too Long For the server To process. Often the result Of too much data being encoded As a query-String Of a Get request, In which Case it should be converted To a POST request.
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_UNSUPPORTED_MEDIA_TYPE">
 <summary>
 415 Unsupported Media Type |
 The request entity has a media type which the server Or resource does Not support. For example, the client uploads an image As image/svg+xml, but the server requires that images use a different format.
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_RANGE_NOT_SATISFIABLE">
 <summary>
 416 Requested Range Not Satisfiable (RFC 7233) |
 The client has asked For a portion Of the file (Byte serving), but the server cannot supply that portion. For example, If the client asked For a part Of the file that lies beyond the End Of the file.
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_EXPECTATION_FAILED">
 <summary>
 417 Expectation Failed |
 The server cannot meet the requirements Of the Expect request-header field.
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_IM_TEAPOT">
 <summary>
 418 I'm a teapot (RFC 2324) |
 This code was defined In 1998 As one Of the traditional IETF April Fools' jokes, in RFC 2324, Hyper Text Coffee Pot Control Protocol, 
 and is not expected to be implemented by actual HTTP servers. The RFC specifies this code should be returned by tea pots requested to brew coffee.
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_AUTH_TIMEOUT">
 <summary>
 419 Authentication Timeout (Not in RFC 2616) |
 Not a part of the HTTP standard, 419 Authentication Timeout denotes that previously valid authentication has expired. 
 It Is used as an alternative to 401 Unauthorized in order to differentiate from otherwise authenticated clients being denied access to specific server resources.[citation needed]
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_METHOD_FAILURE">
 <summary>
 420 Method Failure (Spring Framework) |
 Not part of the HTTP standard, but defined by Spring in the HttpStatus class to be used when a method failed. This status code Is deprecated by Spring.
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_ENHANCE_YOUR_CALM">
 <summary>
 420 Enhance Your Calm (Twitter) |
 Not part of the HTTP standard, but returned by version 1 of the Twitter Search And Trends API when the client Is being rate limited.[17] 
 Other services may wish to implement the 429 Too Many Requests response code instead.
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_MISDIRECTED_REQUEST">
 <summary>
 421 Misdirected Request (HTTP/2) |
 The request was directed at a server that Is Not able To produce a response (For example because a connection reuse).[18]
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_UNPROCESSABLE_ENTITY">
 <summary>
 422 Unprocessable Entity (WebDAV; RFC 4918) |
 The request was well-formed but was unable To be followed due To semantic errors.[4]
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_LOCKED">
 <summary>
 423 Locked (WebDAV; RFC 4918) |
 The resource that Is being accessed Is locked.[4]
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_FAILED_DEPENDENCY">
 <summary>
 424 Failed Dependency (WebDAV; RFC 4918) |
 The request failed due To failure Of a previous request (e.g., a PROPPATCH).[4]
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_UPGRADE_REQUIRED">
 <summary>
 426 Upgrade Required |
 The client should switch To a different protocol such As TLS/1.0, given In the Upgrade header field.
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_PRECONDITION_REQUIRED">
 <summary>
 428 Precondition Required (RFC 6585) |
 The origin server requires the request To be conditional. Intended To prevent "the 'lost update' problem, 
 where a client GETs a resource's state, modifies it, and PUTs it back to the server, when meanwhile a third party 
 has modified the state on the server, leading to a conflict."[19]
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_TOO_MANY_REQUEST">
 <summary>
 429 Too Many Requests (RFC 6585) |
 The user has sent too many requests In a given amount Of time. Intended For use With rate limiting schemes.[19]
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_REQUEST_HEADER_FIELDS_TOO_LARGE">
 <summary>
 431 Request Header Fields Too Large (RFC 6585) |
 The server Is unwilling To process the request because either an individual header field, Or all the header fields collectively, are too large.[19]
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_LOGIN_TIMEOUT">
 <summary>
 440 Login Timeout (Microsoft) |
 A Microsoft extension. Indicates that your session has expired.[20]
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_NO_RESPONSE">
 <summary>
 444 No Response (Nginx) |
 Used in Nginx logs to indicate that the server has returned no information to the client And closed the connection (useful as a deterrent for malware).
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_RETRY_WITH">
 <summary>
 449 Retry With (Microsoft) |
 A Microsoft extension. The request should be retried after performing the appropriate action.[21]
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_BLOCKED">
 <summary>
 450 Blocked by Windows Parental Controls (Microsoft) |
 A Microsoft extension. This Error Is given When Windows Parental Controls are turned On And are blocking access To the given webpage.[22]
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_LEGAL_UNAVAILABLE">
 <summary>
 451 Unavailable For Legal Reasons (Internet draft) |
 Defined in the internet draft "A New HTTP Status Code for Legally-restricted Resources".[23] 
 Intended to be used when resource access Is denied for legal reasons, e.g. censorship Or government-mandated blocked access. 
 A reference to the 1953 dystopian novel Fahrenheit 451, where books are outlawed.[24]
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_REDIRECT">
 <summary>
 451 Redirect (Microsoft) |
 Used in Exchange ActiveSync if there either Is a more efficient server to use Or the server cannot access the users' mailbox.[25]
 The client Is supposed To re-run the HTTP Autodiscovery protocol To find a better suited server.[26]
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_REQUEST_HEADER_TOO_LARGE">
 <summary>
 494 Request Header Too Large (Nginx) |
 Nginx internal code similar To 431 but it was introduced earlier In version 0.9.4 (On January 21, 2011).[27][original research?]
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_CERT_ERROR">
 <summary>
 495 Cert Error (Nginx) |
 Nginx internal code used When SSL client certificate Error occurred To distinguish it from 4XX In a log And an Error page redirection.
 (在SSL层解密的时候错误，则为证书错误)
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_NO_CERT">
 <summary>
 496 No Cert (Nginx) |
 Nginx internal code used When client didn't provide certificate to distinguish it from 4XX in a log and an error page redirection.
 (客户端在向ssl服务器发送ssl请求的时候没有应用密匙加密，直接发送明文给服务器了，则服务器直接拒绝请求)
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_HTTP_TO_HTTPS">
 <summary>
 497 HTTP to HTTPS (Nginx) |
 Nginx internal code used For the plain HTTP requests that are sent To HTTPS port To distinguish it from 4XX In a log And an Error page redirection.
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_TOKEN_INVALID">
 <summary>
 498 Token expired/invalid (Esri) |
 Returned by ArcGIS For Server. A code Of 498 indicates an expired Or otherwise invalid token.[28]
 (错误的参数信息)
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_CLOSED_REQUEST">
 <summary>
 499 Client Closed Request (Nginx) |
 Used in Nginx logs to indicate when the connection has been closed by client while the server Is still processing its request, making server unable to send a status code back.[29]
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_TOKEN_REQUIRED">
 <summary>
 499 Token required (Esri) |
 Returned by ArcGIS For Server. A code Of 499 indicates that a token Is required (If no token was submitted).[28]
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_INTERNAL_SERVER_ERROR">
 <summary>
 500 Internal Server Error |
 A generic Error message, given When an unexpected condition was encountered And no more specific message Is suitable.
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_NOT_IMPLEMENTED">
 <summary>
 501 Not Implemented |
 The server either does Not recognize the request method, Or it lacks the ability To fulfill the request. Usually this implies future availability (e.g., a New feature Of a web-service API).
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_BAD_GATEWAY">
 <summary>
 502 Bad Gateway |
 The server was acting As a gateway Or proxy And received an invalid response from the upstream server.
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_SERVICE_UNAVAILABLE">
 <summary>
 503 Service Unavailable |
 The server Is currently unavailable (because it Is overloaded Or down For maintenance). Generally, this Is a temporary state.
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_GATEWAY_TIMEOUT">
 <summary>
 504 Gateway Timeout |
 The server was acting As a gateway Or proxy And did Not receive a timely response from the upstream server.
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_VERSION_NOT_SUPPORTED">
 <summary>
 505 HTTP Version Not Supported |
 The server does Not support the HTTP protocol version used In the request.
 (服务器所不支持的协议类型)
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_NEGOTIATES">
 <summary>
 506 Variant Also Negotiates (RFC 2295) |
 Transparent content negotiation For the request results In a circular reference.[30]
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_INSUFFICIENT_STORAGE">
 <summary>
 507 Insufficient Storage (WebDAV; RFC 4918) |
 The server Is unable To store the representation needed To complete the request.[4]
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_LOOP_DETECTED">
 <summary>
 508 Loop Detected (WebDAV; RFC 5842) |
 The server detected an infinite Loop While processing the request (sent In lieu Of 208 Already Reported).
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_BANDWIDTH_LIMITED_EXCEEDED">
 <summary>
 509 Bandwidth Limit Exceeded (Apache bw/limited extension)[31] |
 This status code Is Not specified In any RFCs. Its use Is unknown.
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_NOT_EXTENDED">
 <summary>
 510 Not Extended (RFC 2774) |
 Further extensions To the request are required For the server To fulfil it.[32]
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_NETWORK_AUTH_REQUIRED">
 <summary>
 511 Network Authentication Required (RFC 6585) |
 The client needs To authenticate To gain network access. Intended For use by intercepting proxies used To control access To the network 
 (e.g., "captive portals" used To require agreement To Terms Of Service before granting full Internet access via a Wi-Fi hotspot).[19]
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_UNKNOWN_ERROR(System.String)">
 <summary>
 520 Unknown Error |
 This status code Is Not specified In any RFC And Is returned by certain services, For instance Microsoft Azure And CloudFlare servers: 
 "The 520 error is essentially a “catch-all” response for when the origin server returns something unexpected or something that is not 
 tolerated/interpreted (protocol violation or empty response)."[33]
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_CONNECTION_TIMEOUT">
 <summary>
 522 Origin Connection Time-out |
 This status code Is Not specified In any RFCs, but Is used by CloudFlare's reverse proxies to signal that a server connection timed out.
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_READ_TIMEOUT_ERROR">
 <summary>
 598 Network read timeout error (Unknown) |
 This status code Is Not specified In any RFCs, but Is used by Microsoft HTTP proxies To signal a network read timeout behind the proxy To a client In front Of the proxy.[citation needed]
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.HTTP.NetResponse.RFC_CONNECT_TIMEOUT_ERROR">
 <summary>
 599 Network connect timeout error (Unknown) |
 This status code Is Not specified In any RFCs, but Is used by Microsoft HTTP proxies To signal a network connect timeout behind the proxy To a client In front Of the proxy.[citation needed]
 </summary>
 <returns></returns>
</member>
<member name="M:Darwinism.IPC.Networking.HTTP.NetResponse.IsHTTP_RFC(Microsoft.VisualBasic.Parallel.RequestStream)">
 <summary>
 服务器所返回来的数据是否为HTTP错误代码
 </summary>
 <param name="response"></param>
 <returns></returns>
</member>
<member name="M:Darwinism.IPC.Networking.MMFProtocol.Pipeline.API.WriteData(System.String,Microsoft.VisualBasic.Serialization.RawStream,System.Int32)">
 <summary>
 生成的映射位置为:  &lt;var>:&lt;ChunkSize>
 </summary>
 <param name="var"></param>
 <param name="value"></param>
 <returns></returns>
</member>
<member name="M:Darwinism.IPC.Networking.MMFProtocol.Pipeline.API.TryGetValue(System.String)">
 <summary>
 
 </summary>
 <param name="var">$var or var</param>
 <returns></returns>
</member>
<member name="M:Darwinism.IPC.Networking.MMFProtocol.Pipeline.API.TryGetValue``1(System.String)">
 <summary>
 不存在的话会返回空值
 </summary>
 <typeparam name="T"></typeparam>
 <param name="var"></param>
 <returns></returns>
</member>
<member name="M:Darwinism.IPC.Networking.MMFProtocol.Pipeline.API.IsRef(System.String)">
 <summary>
 
 </summary>
 <param name="addr">$var:size</param>
 <returns></returns>
</member>
<member name="T:Darwinism.IPC.Networking.MMFProtocol.Pipeline.Pipeline">
 <summary>
 exec cmd /var $&lt;piplineName>, this can be using in the CLI programming for passing the variables between the program more efficient
 </summary>
 
</member>
<member name="M:Darwinism.IPC.Networking.MMFProtocol.Pipeline.Pipeline.GetValue``1(System.String)">
 <summary>
 假若变量不存在，则返回空值
 </summary>
 <typeparam name="T"></typeparam>
 <param name="var"></param>
 <returns></returns>
</member>
<member name="M:Darwinism.IPC.Networking.MMFProtocol.Pipeline.Pipeline.__allocated(System.Int64,Microsoft.VisualBasic.Parallel.RequestStream,System.Net.IPEndPoint)">
 <summary>
 在写数据之前需要先使用这个方法进行内存区块的创建
 </summary>
 <returns></returns>
</member>
<member name="T:Darwinism.IPC.Networking.MMFProtocol.Pipeline.PipeStream">
 <summary>
 
 </summary>
</member>
<member name="T:Darwinism.IPC.Networking.Protocols.IProtocolHandler">
 <summary>
 Object for handles the request <see cref="T:Darwinism.IPC.Networking.Protocols.Reflection.ProtocolAttribute"/>.
 </summary>
</member>
<member name="M:Darwinism.IPC.Networking.Protocols.Extensions.Ping(System.Net.IPEndPoint,System.Int32)">
 <summary>
 -1标识Ping不通
 </summary>
 <param name="operationTimeOut">ms</param>
 <returns></returns>
</member>
<member name="M:Darwinism.IPC.Networking.Protocols.Extensions.Ping(Darwinism.IPC.Networking.Tcp.TcpRequest,System.Int32)">
 <summary>
 -1 ping failure
 </summary>
 <param name="invoke"></param>
 <param name="timeout"></param>
 <returns></returns>
</member>
<member name="T:Darwinism.IPC.Networking.Protocols.LocalRequestClient">
 <summary>
 helper for run services module debug
 </summary>
</member>
<member name="T:Darwinism.IPC.Networking.Protocols.Reflection.AppMgr">
 <summary>
 能够处理多种协议数据
 </summary>
</member>
<member name="M:Darwinism.IPC.Networking.Protocols.Reflection.AppMgr.RegisterApp``1(``0,System.Boolean)">
 <summary>
 有点多此一举？？
 </summary>
 <typeparam name="T"></typeparam>
 <param name="App"></param>
 <param name="[overrides]"></param>
 <returns></returns>
</member>
<member name="T:Darwinism.IPC.Networking.Protocols.Reflection.ProtocolAttribute">
 <summary>
 This attribute indicates the entry point of the protocol processor definition location 
 and the details of the protocol processor. 
 </summary>
</member>
<member name="P:Darwinism.IPC.Networking.Protocols.Reflection.ProtocolAttribute.EntryPoint">
 <summary>
 Entry point for the data protocols, this property usually correspondent to the request stream's 
 property: <see cref="P:Microsoft.VisualBasic.Parallel.RequestStream.Protocol"/> and <see cref="P:Microsoft.VisualBasic.Parallel.RequestStream.ProtocolCategory"/>
 </summary>
 <returns></returns>
</member>
<member name="P:Darwinism.IPC.Networking.Protocols.Reflection.ProtocolAttribute.DeclaringType">
 <summary>
 这个属性对于方法而言为空，但是对于类型入口点而言则不为空
 </summary>
 <returns></returns>
</member>
<member name="M:Darwinism.IPC.Networking.Protocols.Reflection.ProtocolAttribute.#ctor(System.Int64)">
 <summary>
 Generates the protocol method entrypoint.(应用于服务器上面的协议处理方法)
 </summary>
 <param name="entryPoint"></param>
</member>
<member name="M:Darwinism.IPC.Networking.Protocols.Reflection.ProtocolAttribute.#ctor(System.Type)">
 <summary>
 Generates the <see cref="T:Darwinism.IPC.Networking.Protocols.Reflection.ProtocolHandler"/> on the server side, 
 this is using for initialize a protocol API entry point.
 (客户端上面的类型)
 </summary>
 <param name="type">客户端上面的类型</param>
</member>
<member name="M:Darwinism.IPC.Networking.Protocols.Reflection.ProtocolAttribute.GetProtocolCategory(System.Type)">
 <summary>
 This method is usually using for generates a <see cref="T:Darwinism.IPC.Networking.Protocols.Reflection.ProtocolHandler"/> object.
 Correspondent to the protocol class property <see cref="P:Microsoft.VisualBasic.Parallel.RequestStream.ProtocolCategory"/>
 </summary>
 <param name="Type"></param>
 <returns></returns>
</member>
<member name="M:Darwinism.IPC.Networking.Protocols.Reflection.ProtocolAttribute.GetEntryPoint(System.Reflection.MethodInfo)">
 <summary>
 This method is usually using for generates a details protocol processor, example 
 is calling the method interface: <see cref="T:Microsoft.VisualBasic.Parallel.DataRequestHandler"/>
 Correspondent to the protocol entry property <see cref="P:Microsoft.VisualBasic.Parallel.RequestStream.Protocol"/>
 </summary>
 <param name="Method"></param>
 <returns></returns>
</member>
<member name="T:Darwinism.IPC.Networking.Protocols.Reflection.ProtocolHandler">
 <summary>
 这个模块只处理<see cref="T:Microsoft.VisualBasic.Parallel.DataRequestHandler"/>类型的接口
 
 ```vbnet
 <see cref="T:System.Delegate"/> Function(request As <see cref="T:Microsoft.VisualBasic.Parallel.RequestStream"/>, RemoteAddress As <see cref="T:System.Net.IPEndPoint"/>) As <see cref="T:Microsoft.VisualBasic.Parallel.RequestStream"/>
 ```
 </summary>
</member>
<member name="F:Darwinism.IPC.Networking.Protocols.Reflection.ProtocolHandler.host">
 <summary>
 target object that current handler hooks on
 </summary>
</member>
<member name="P:Darwinism.IPC.Networking.Protocols.Reflection.ProtocolHandler.DeclaringType">
 <summary>
 这个类型建议一般为某种枚举类型
 </summary>
 <returns></returns>
</member>
<member name="M:Darwinism.IPC.Networking.Protocols.Reflection.ProtocolHandler.#ctor(System.Object,System.Boolean)">
 <summary>
 请注意，假若没有在目标的类型定义之中查找出入口点的定义，则这个构造函数会报错，
 假若需要安全的创建对象，可以使用<see cref="M:Darwinism.IPC.Networking.Protocols.Reflection.ProtocolHandler.SafelyCreateObject``1(``0)"/>函数
 </summary>
 <param name="target">protocol的实例</param>
</member>
<member name="M:Darwinism.IPC.Networking.Protocols.Reflection.ProtocolHandler.SafelyCreateObject``1(``0)">
 <summary>
 失败会返回空值
 </summary>
 <typeparam name="T"></typeparam>
 <param name="App"></param>
 <returns></returns>
</member>
<member name="M:Darwinism.IPC.Networking.Protocols.Reflection.ProtocolHandler.HandleRequest(Microsoft.VisualBasic.Parallel.RequestStream,System.Net.IPEndPoint)">
 <summary>
 Handle the data request from the client for socket events: ResponseHandler.
 </summary>
 <param name="request">The request stream object which contains the commands from the client</param>
 <param name="remoteDevcie">The IPAddress of the target incoming client data request.</param>
 <returns></returns>
</member>
<member name="T:Darwinism.IPC.Networking.Protocols.Reflection.ProtocolInvoker">
 <summary>
 Working in server side
 </summary>
</member>
<member name="P:Darwinism.IPC.Networking.Protocols.Streams.Array.ArrayAbstract`1.value(System.Int32)">
 <summary>
 由于这个模块是专门应用于服务器端的数据交换的模块，所以稳定性优先，
 这里面的函数都是安全的数组访问方法
 </summary>
 <param name="index"></param>
 <returns></returns>
</member>
<member name="T:Darwinism.IPC.Networking.Protocols.Streams.Array.ValueArray`1">
 <summary>
 对于<see cref="T:System.Int64"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Double"/>, <see cref="T:System.DateTime"/>
 这些类型的数据来说，进行网络传输的时候使用json会被转换为字符串，数据量比较大，而转换为字节再进行传输，数据流量的消耗会比较小
 </summary>
 <typeparam name="T"></typeparam>
 <remarks>这个是定长的数组序列</remarks>
</member>
<member name="T:Darwinism.IPC.Networking.Protocols.Streams.Array.VarArray`1">
 <summary>
 The bytes length of the element in thee source sequence is not fixed.
 (序列里面的元素的长度是不固定的)
 </summary>
</member>
<member name="M:Darwinism.IPC.Networking.Protocols.Streams.Array.VarArray`1.Serialize(System.IO.Stream)">
 <summary>
 Long + T + Long + T
 其中Long是一个8字节长度的数组，用来指示T的长度
 </summary>
</member>
<member name="T:Darwinism.IPC.Networking.Protocols.Streams.String">
 <summary>
 字符串序列流
 </summary>
</member>
<member name="T:Darwinism.IPC.Networking.ApplicationServices.ServerModule">
 <summary>
 The Tcp socket server abstract
 </summary>
</member>
<member name="F:Darwinism.IPC.Networking.ApplicationServices.ServerModule.socket">
 <summary>
 Tcp socket
 </summary>
</member>
<member name="M:Darwinism.IPC.Networking.ApplicationServices.ServerModule.#ctor(System.Int32)">
 <summary>
 Create a new server module based on a tcp server socket.
 </summary>
 <param name="port">The listen port of the tcp socket.</param>
</member>
<member name="M:Darwinism.IPC.Networking.ApplicationServices.ServerModule.ProtocolHandler">
 <summary>
 Generally, using a <see cref="T:Darwinism.IPC.Networking.Protocols.Reflection.ProtocolAttribute"/> attribute using reflection way is recommended.
 </summary>
 <returns></returns>
</member>
<member name="T:Darwinism.IPC.Networking.Tcp.StateObject">
 <summary>
 State object for reading client data asynchronously
 </summary>
 <remarks></remarks>
</member>
<member name="F:Darwinism.IPC.Networking.Tcp.StateObject.BufferSize">
 <summary>
 Size of receive buffer.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Darwinism.IPC.Networking.Tcp.StateObject.workSocket">
 <summary>
 Client  socket.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Darwinism.IPC.Networking.Tcp.StateObject.readBuffer">
 <summary>
 Receive buffer.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Darwinism.IPC.Networking.Tcp.StateObject.received">
 <summary>
 Received data.
 </summary>
 <remarks></remarks>
</member>
<member name="T:Darwinism.IPC.Networking.Tcp.TcpRequest">
 <summary>
 The server socket should returns some data string to this client or this client 
 will stuck at the <see cref="M:Darwinism.IPC.Networking.Tcp.TcpRequest.SendMessage(Microsoft.VisualBasic.Parallel.RequestStream)"></see> function.
 (服务器端``TcpServicesSocket``必须要返回数据， 
 否则本客户端会在<see cref="M:Darwinism.IPC.Networking.Tcp.TcpRequest.SendMessage(Microsoft.VisualBasic.Parallel.RequestStream)"></see>函数位置一直处于等待的状态)
 </summary>
 <remarks></remarks>
</member>
<member name="F:Darwinism.IPC.Networking.Tcp.TcpRequest.port">
 <summary>
 The port number for the remote device.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Darwinism.IPC.Networking.Tcp.TcpRequest.timeout">
 <summary>
 A System.TimeSpan that represents the number of milliseconds to wait, or a System.TimeSpan
 that represents -1 milliseconds to wait indefinitely.
 </summary>
</member>
<member name="F:Darwinism.IPC.Networking.Tcp.TcpRequest.remoteEP">
 <summary>
 Remote End Point
 </summary>
 <remarks></remarks>
</member>
<member name="M:Darwinism.IPC.Networking.Tcp.TcpRequest.SetVerbose(System.Boolean)">
 <summary>
 enable the verbose debug echo
 </summary>
 <param name="[option]"></param>
 <returns></returns>
</member>
<member name="M:Darwinism.IPC.Networking.Tcp.TcpRequest.#ctor(Darwinism.IPC.Networking.Tcp.TcpRequest,Microsoft.VisualBasic.ApplicationServices.Debugging.ExceptionHandler)">
 <summary>

 </summary>
 <param name="client">
 Copy the TCP client connection profile data from this object.
 (从本客户端对象之中复制出连接配置参数以进行初始化操作)
 </param>
 <param name="exceptionHandler"></param>
 <remarks></remarks>
</member>
<member name="M:Darwinism.IPC.Networking.Tcp.TcpRequest.#ctor(System.String,System.Int32,Microsoft.VisualBasic.ApplicationServices.Debugging.ExceptionHandler)">
 <summary>

 </summary>
 <param name="remotePort"></param>
 <param name="exceptionHandler">
 Public <see cref="T:System.Delegate"/> Sub ExceptionHandler(ex As <see cref="T:System.Exception"/>)
 </param>
 <remarks></remarks>
</member>
<member name="M:Darwinism.IPC.Networking.Tcp.TcpRequest.LocalConnection(System.Int32,Microsoft.VisualBasic.ApplicationServices.Debugging.ExceptionHandler)">
 <summary>
 初始化一个在本机进行进程间通信的Socket对象
 </summary>
 <param name="localPort"></param>
 <param name="exceptionHandler"></param>
 <returns></returns>
 <remarks></remarks>
 
</member>
<member name="M:Darwinism.IPC.Networking.Tcp.TcpRequest.SendMessage(System.String)">
 <summary>
 This function returns the server reply for this request <paramref name="Message"></paramref>.
 </summary>
 <param name="Message">The client request to the server.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Darwinism.IPC.Networking.Tcp.TcpRequest.SendMessage(Microsoft.VisualBasic.Parallel.RequestStream)">
 <summary>
 Send a request message to the remote server.
 </summary>
 <param name="message"></param>
 <returns></returns>
</member>
<member name="M:Darwinism.IPC.Networking.Tcp.TcpRequest.SendMessage(System.Byte[])">
 <summary>
 最底层的消息发送函数
 </summary>
 <param name="message"></param>
 <returns></returns>
</member>
<member name="T:Darwinism.IPC.Networking.Tcp.TcpServicesSocket">
 <summary>
 Socket listening object which is running at the server side asynchronous able multiple threading.
 a wrapper of the <see cref="T:Darwinism.IPC.Networking.TcpSocket.SimpleTcpServer"/>
 </summary>
 <remarks>
 (运行于服务器端上面的Socket监听对象，多线程模型)
 </remarks>
</member>
<member name="P:Darwinism.IPC.Networking.Tcp.TcpServicesSocket.LocalPort">
 <summary>
 The server services listening on this local port.(当前的这个服务器对象实例所监听的本地端口号)
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Darwinism.IPC.Networking.Tcp.TcpServicesSocket.ResponseHandler">
 <summary>
 This function pointer using for the data request handling of the data request from the client socket.   
 [Public Delegate Function DataResponseHandler(str As <see cref="T:System.String"/>, RemoteAddress As <see cref="T:System.Net.IPEndPoint"/>) As <see cref="T:System.String"/>]
 (这个函数指针用于处理来自于客户端的请求)
 </summary>
 <remarks></remarks>
</member>
<member name="M:Darwinism.IPC.Networking.Tcp.TcpServicesSocket.#ctor(System.Int32,Microsoft.VisualBasic.ApplicationServices.Debugging.ExceptionHandler,System.Boolean)">
 <summary>
 消息处理的方法接口： Public Delegate Function DataResponseHandler(str As String, RemotePort As Integer) As String
 </summary>
 <param name="localPort">监听的本地端口号，假若需要进行端口映射的话，则可以在<see cref="M:Darwinism.IPC.Networking.Tcp.TcpServicesSocket.Run"></see>方法之中设置映射的端口号</param>
 <remarks></remarks>
</member>
<member name="M:Darwinism.IPC.Networking.Tcp.TcpServicesSocket.#ctor(Microsoft.VisualBasic.Parallel.DataRequestHandler,System.Int32,Microsoft.VisualBasic.ApplicationServices.Debugging.ExceptionHandler,System.Boolean)">
 <summary>
 短连接socket服务端
 </summary>
 <param name="requestEventHandler"></param>
 <param name="localPort"></param>
 <param name="exceptionHandler"></param>
</member>
<member name="M:Darwinism.IPC.Networking.Tcp.TcpServicesSocket.BeginListen(Microsoft.VisualBasic.Parallel.DataRequestHandler,System.Int32,System.Boolean,Microsoft.VisualBasic.ApplicationServices.Debugging.ExceptionHandler)">
 <summary>
 函数返回Socket的注销方法
 </summary>
 <param name="requestEventHandler">Public Delegate Function DataResponseHandler(str As String, RemotePort As Integer) As String</param>
 <param name="localPort"></param>
 <param name="exceptionHandler"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Darwinism.IPC.Networking.Tcp.TcpServicesSocket.Run">
 <summary>
 This server waits for a connection and then uses  asychronous operations to
 accept the connection, get data from the connected client,
 echo that data back to the connected client.
 It then disconnects from the client and waits for another client.(请注意，当服务器的代码运行到这里之后，代码将被阻塞在这里)
 </summary>
 <remarks></remarks>
</member>
<member name="M:Darwinism.IPC.Networking.Tcp.TcpServicesSocket.Run(System.Net.IPEndPoint)">
 <summary>
 This server waits for a connection and then uses  asychronous operations to
 accept the connection, get data from the connected client,
 echo that data back to the connected client.
 It then disconnects from the client and waits for another client.
 </summary>
 <remarks>(请注意，当服务器的代码运行到这里之后，代码将被阻塞在这里)</remarks>
</member>
<member name="M:Darwinism.IPC.Networking.Tcp.TcpServicesSocket.HandleRequest(System.Net.IPEndPoint,System.IO.Stream,Microsoft.VisualBasic.Parallel.RequestStream)">
 <summary>
 All the data has been read from the client. Display it on the console.
 Echo the data back to the client.
 </summary>
 <param name="remote"></param>
 <param name="requestData"></param>
</member>
<member name="M:Darwinism.IPC.Networking.Tcp.TcpServicesSocket.Send(System.IO.Stream,Microsoft.VisualBasic.Parallel.BufferPipe)">
 <summary>
 Server reply the processing result of the request from the client.
 </summary>
 <param name="data"></param>
 <remarks></remarks>
</member>
<member name="M:Darwinism.IPC.Networking.Tcp.TcpServicesSocket.IsServerInternalException(System.String)">
 <summary>
 SERVER_INTERNAL_EXCEPTION，Server encounter an internal exception during processing
 the data request from the remote device.
 (判断是否服务器在处理客户端的请求的时候，发生了内部错误)
 </summary>
 <param name="replyData"></param>
 <returns></returns>
 <remarks></remarks>
 
</member>
<member name="F:Darwinism.IPC.Networking.Tcp.TcpServicesSocket.disposedValue">
 <summary>
 退出监听线程所需要的
 </summary>
 <remarks></remarks>
</member>
<member name="M:Darwinism.IPC.Networking.Tcp.TcpServicesSocket.Dispose">
 <summary>
 Stop the server socket listening threads.(终止服务器Socket监听线程)
 </summary>
 <remarks></remarks>
</member>
<member name="T:Darwinism.IPC.Networking.TcpSocket.ConnectionEventArgs">
 <summary>
 Arguments for connection events.
 </summary>
</member>
<member name="P:Darwinism.IPC.Networking.TcpSocket.ConnectionEventArgs.IpPort">
 <summary>
 The IP address and port number of the connected peer socket.
 </summary>
</member>
<member name="P:Darwinism.IPC.Networking.TcpSocket.ConnectionEventArgs.Reason">
 <summary>
 The reason for the disconnection, if any.
 </summary>
</member>
<member name="T:Darwinism.IPC.Networking.TcpSocket.DataReceivedEventArgs">
 <summary>
 Arguments for data received from connected endpoints.
 </summary>
</member>
<member name="P:Darwinism.IPC.Networking.TcpSocket.DataReceivedEventArgs.IpPort">
 <summary>
 The IP address and port number of the connected endpoint.
 </summary>
</member>
<member name="P:Darwinism.IPC.Networking.TcpSocket.DataReceivedEventArgs.Data">
 <summary>
 The data received from the endpoint.
 </summary>
</member>
<member name="T:Darwinism.IPC.Networking.TcpSocket.DataSentEventArgs">
 <summary>
 Arguments for data sent to a connected endpoint.
 </summary>
</member>
<member name="P:Darwinism.IPC.Networking.TcpSocket.DataSentEventArgs.IpPort">
 <summary>
 The IP address and port number of the connected endpoint.
 </summary>
</member>
<member name="P:Darwinism.IPC.Networking.TcpSocket.DataSentEventArgs.BytesSent">
 <summary>
 The number of bytes sent.
 </summary>
</member>
<member name="T:Darwinism.IPC.Networking.TcpSocket.DisconnectReason">
 <summary>
 Reason why a client disconnected.
 </summary>
</member>
<member name="F:Darwinism.IPC.Networking.TcpSocket.DisconnectReason.Normal">
 <summary>
 Normal disconnection.
 </summary>
</member>
<member name="F:Darwinism.IPC.Networking.TcpSocket.DisconnectReason.Kicked">
 <summary>
 Client connection was intentionally terminated programmatically or by the server.
 </summary>
</member>
<member name="F:Darwinism.IPC.Networking.TcpSocket.DisconnectReason.Timeout">
 <summary>
 Client connection timed out; server did not receive data within the timeout window.
 </summary>
</member>
<member name="F:Darwinism.IPC.Networking.TcpSocket.DisconnectReason.None">
 <summary>
 The connection was not disconnected.
 </summary>
</member>
<member name="T:Darwinism.IPC.Networking.TcpSocket.SimpleTcpKeepaliveSettings">
 <summary>
 SimpleTcp keepalive settings.
 Keepalive probes are sent after an idle period defined by TcpKeepAliveTime (seconds).
 Should a keepalive response not be received within TcpKeepAliveInterval (seconds), a subsequent keepalive probe will be sent.
 For .NET Framework, should 10 keepalive probes fail, the connection will terminate.
 For .NET Core, should a number of probes fail as specified in TcpKeepAliveRetryCount, the connection will terminate.
 TCP keepalives are not supported in .NET Standard.
 </summary>
</member>
<member name="F:Darwinism.IPC.Networking.TcpSocket.SimpleTcpKeepaliveSettings.EnableTcpKeepAlives">
 <summary>
 Enable or disable TCP-based keepalive probes.
 TCP keepalives are only supported in .NET Core and .NET Framework projects.  .NET Standard does not provide facilities to support TCP keepalives.
 </summary>
</member>
<member name="P:Darwinism.IPC.Networking.TcpSocket.SimpleTcpKeepaliveSettings.TcpKeepAliveInterval">
 <summary>
 TCP keepalive interval, i.e. the number of seconds a TCP connection will wait for a keepalive response before sending another keepalive probe.
 Default is 5 seconds.  Value must be greater than zero.
 </summary>
</member>
<member name="P:Darwinism.IPC.Networking.TcpSocket.SimpleTcpKeepaliveSettings.TcpKeepAliveTime">
 <summary>
 TCP keepalive time, i.e. the number of seconds a TCP connection will remain alive/idle before keepalive probes are sent to the remote. 
 Default is 5 seconds.  Value must be greater than zero.
 </summary>
</member>
<member name="P:Darwinism.IPC.Networking.TcpSocket.SimpleTcpKeepaliveSettings.TcpKeepAliveRetryCount">
 <summary>
 TCP keepalive retry count, i.e. the number of times a TCP probe will be sent in effort to verify the connection.
 After the specified number of probes fail, the connection will be terminated.
 </summary>
</member>
<member name="M:Darwinism.IPC.Networking.TcpSocket.SimpleTcpKeepaliveSettings.#ctor">
 <summary>
 Instantiate the object.
 </summary>
</member>
<member name="T:Darwinism.IPC.Networking.TcpSocket.SimpleTcpStatistics">
 <summary>
 SimpleTcp statistics.
 </summary>
</member>
<member name="P:Darwinism.IPC.Networking.TcpSocket.SimpleTcpStatistics.StartTime">
 <summary>
 The time at which the client or server was started.
 </summary>
</member>
<member name="P:Darwinism.IPC.Networking.TcpSocket.SimpleTcpStatistics.UpTime">
 <summary>
 The amount of time which the client or server has been up.
 </summary>
</member>
<member name="P:Darwinism.IPC.Networking.TcpSocket.SimpleTcpStatistics.ReceivedBytes">
 <summary>
 The number of bytes received.
 </summary>
</member>
<member name="P:Darwinism.IPC.Networking.TcpSocket.SimpleTcpStatistics.SentBytes">
 <summary>
 The number of bytes sent.
 </summary>
</member>
<member name="M:Darwinism.IPC.Networking.TcpSocket.SimpleTcpStatistics.#ctor">
 <summary>
 Initialize the statistics object.
 </summary>
</member>
<member name="M:Darwinism.IPC.Networking.TcpSocket.SimpleTcpStatistics.ToString">
 <summary>
 Return human-readable version of the object.
 </summary>
 <returns></returns>
</member>
<member name="M:Darwinism.IPC.Networking.TcpSocket.SimpleTcpStatistics.Reset">
 <summary>
 Reset statistics other than StartTime and UpTime.
 </summary>
</member>
<member name="T:Darwinism.IPC.Networking.TcpSocket.SimpleTcpClient">
 <summary>
 SimpleTcp client with SSL support.  
 Set the Connected, Disconnected, and DataReceived events.  
 Once set, use Connect() to connect to the server.
 </summary>
</member>
<member name="P:Darwinism.IPC.Networking.TcpSocket.SimpleTcpClient.IsConnected">
 <summary>
 Indicates whether or not the client is connected to the server.
 </summary>
</member>
<member name="P:Darwinism.IPC.Networking.TcpSocket.SimpleTcpClient.LocalEndpoint">
 <summary>
 Client IPEndPoint if connected.
 </summary>
</member>
<member name="P:Darwinism.IPC.Networking.TcpSocket.SimpleTcpClient.Settings">
 <summary>
 SimpleTcp client settings.
 </summary>
</member>
<member name="P:Darwinism.IPC.Networking.TcpSocket.SimpleTcpClient.Events">
 <summary>
 SimpleTcp client events.
 </summary>
</member>
<member name="P:Darwinism.IPC.Networking.TcpSocket.SimpleTcpClient.Statistics">
 <summary>
 SimpleTcp statistics.
 </summary>
</member>
<member name="P:Darwinism.IPC.Networking.TcpSocket.SimpleTcpClient.Keepalive">
 <summary>
 SimpleTcp keepalive settings.
 </summary>
</member>
<member name="F:Darwinism.IPC.Networking.TcpSocket.SimpleTcpClient.Debugger">
 <summary>
 Method to invoke to send a log message.
 </summary>
</member>
<member name="P:Darwinism.IPC.Networking.TcpSocket.SimpleTcpClient.ServerIpPort">
 <summary>
 The IP:port of the server to which this client is mapped.
 </summary>
</member>
<member name="M:Darwinism.IPC.Networking.TcpSocket.SimpleTcpClient.#ctor(System.String)">
 <summary>
 Instantiates the TCP client without SSL. 
 Set the Connected, Disconnected, and DataReceived callbacks. Once set, use Connect() to connect to the server.
 </summary>
 <param name="ipPort">The IP:port of the server.</param> 
</member>
<member name="M:Darwinism.IPC.Networking.TcpSocket.SimpleTcpClient.#ctor(System.String,System.Boolean,System.String,System.String)">
 <summary>
 Instantiates the TCP client. 
 Set the Connected, Disconnected, and DataReceived callbacks. Once set, use Connect() to connect to the server.
 </summary>
 <param name="ipPort">The IP:port of the server.</param> 
 <param name="ssl">Enable or disable SSL.</param>
 <param name="pfxCertFilename">The filename of the PFX certificate file.</param>
 <param name="pfxPassword">The password to the PFX certificate file.</param>
</member>
<member name="M:Darwinism.IPC.Networking.TcpSocket.SimpleTcpClient.#ctor(System.String,System.Int32)">
 <summary>
 Instantiates the TCP client without SSL. 
 Set the Connected, Disconnected, and DataReceived callbacks. Once set, use Connect() to connect to the server.
 </summary>
 <param name="serverIpOrHostname">The server IP address or hostname.</param>
 <param name="port">The TCP port on which to connect.</param>
</member>
<member name="M:Darwinism.IPC.Networking.TcpSocket.SimpleTcpClient.#ctor(System.String,System.Int32,System.Boolean,System.String,System.String)">
 <summary>
 Instantiates the TCP client.  
 Set the Connected, Disconnected, and DataReceived callbacks.  Once set, use Connect() to connect to the server.
 </summary>
 <param name="serverIpOrHostname">The server IP address or hostname.</param>
 <param name="port">The TCP port on which to connect.</param>
 <param name="ssl">Enable or disable SSL.</param>
 <param name="pfxCertFilename">The filename of the PFX certificate file.</param>
 <param name="pfxPassword">The password to the PFX certificate file.</param>
</member>
<member name="M:Darwinism.IPC.Networking.TcpSocket.SimpleTcpClient.#ctor(System.String,System.Int32,System.Security.Cryptography.X509Certificates.X509Certificate2)">
 <summary>
 Instantiates the TCP client with SSL.  
 Set the Connected, Disconnected, and DataReceived callbacks.  Once set, use Connect() to connect to the server.
 </summary>
 <param name="serverIpOrHostname">The server IP address or hostname.</param>
 <param name="port">The TCP port on which to connect.</param>
 <param name="certificate">Certificate.</param>
</member>
<member name="M:Darwinism.IPC.Networking.TcpSocket.SimpleTcpClient.#ctor(System.String,System.Int32,System.Byte[])">
 <summary>
 Instantiates the TCP client with SSL.  
 Set the Connected, Disconnected, and DataReceived callbacks.  Once set, use Connect() to connect to the server.
 </summary>
 <param name="serverIpOrHostname">The server IP address or hostname.</param>
 <param name="port">The TCP port on which to connect.</param>
 <param name="certificate">Byte array containing the certificate.</param>
</member>
<member name="M:Darwinism.IPC.Networking.TcpSocket.SimpleTcpClient.#ctor(System.Net.IPAddress,System.Int32)">
 <summary>
 Instantiates the TCP client without SSL.  
 Set the Connected, Disconnected, and DataReceived callbacks.  Once set, use Connect() to connect to the server.
 </summary>
 <param name="serverIpAddress">The server IP address.</param>
 <param name="port">The TCP port on which to connect.</param>
</member>
<member name="M:Darwinism.IPC.Networking.TcpSocket.SimpleTcpClient.#ctor(System.Net.IPAddress,System.Int32,System.Boolean,System.String,System.String)">
 <summary>
 Instantiates the TCP client.  
 Set the Connected, Disconnected, and DataReceived callbacks.  Once set, use Connect() to connect to the server.
 </summary>
 <param name="serverIpAddress">The server IP address.</param>
 <param name="port">The TCP port on which to connect.</param>
 <param name="ssl">Enable or disable SSL.</param>
 <param name="pfxCertFilename">The filename of the PFX certificate file.</param>
 <param name="pfxPassword">The password to the PFX certificate file.</param>
</member>
<member name="M:Darwinism.IPC.Networking.TcpSocket.SimpleTcpClient.#ctor(System.Net.IPAddress,System.Int32,System.Security.Cryptography.X509Certificates.X509Certificate2)">
 <summary>
 Instantiates the TCP client with SSL.  
 Set the Connected, Disconnected, and DataReceived callbacks.  Once set, use Connect() to connect to the server.
 </summary>
 <param name="serverIpAddress">The server IP address.</param>
 <param name="port">The TCP port on which to connect.</param>
 <param name="certificate">Certificate.</param>
</member>
<member name="M:Darwinism.IPC.Networking.TcpSocket.SimpleTcpClient.#ctor(System.Net.IPAddress,System.Int32,System.Byte[])">
 <summary>
 Instantiates the TCP client with SSL.  
 Set the Connected, Disconnected, and DataReceived callbacks.  Once set, use Connect() to connect to the server.
 </summary>
 <param name="serverIpAddress">The server IP address.</param>
 <param name="port">The TCP port on which to connect.</param>
 <param name="certificate">Byte array containing the certificate.</param>
</member>
<member name="M:Darwinism.IPC.Networking.TcpSocket.SimpleTcpClient.#ctor(System.Net.IPEndPoint)">
 <summary>
 Instantiates the TCP client without SSL.  
 Set the Connected, Disconnected, and DataReceived callbacks.  Once set, use Connect() to connect to the server.
 </summary>
 <param name="serverIpEndPoint">The server IP endpoint.</param>
</member>
<member name="M:Darwinism.IPC.Networking.TcpSocket.SimpleTcpClient.#ctor(System.Net.IPEndPoint,System.Boolean,System.String,System.String)">
 <summary>
 Instantiates the TCP client.  
 Set the Connected, Disconnected, and DataReceived callbacks.  Once set, use Connect() to connect to the server.
 </summary>
 <param name="serverIpEndPoint">The server IP endpoint.</param>
 <param name="ssl">Enable or disable SSL.</param>
 <param name="pfxCertFilename">The filename of the PFX certificate file.</param>
 <param name="pfxPassword">The password to the PFX certificate file.</param>
</member>
<member name="M:Darwinism.IPC.Networking.TcpSocket.SimpleTcpClient.#ctor(System.Net.IPEndPoint,System.Security.Cryptography.X509Certificates.X509Certificate2)">
 <summary>
 Instantiates the TCP client with SSL.  
 Set the Connected, Disconnected, and DataReceived callbacks.  Once set, use Connect() to connect to the server.
 </summary>
 <param name="serverIpEndPoint">The server IP endpoint.</param>
 <param name="certificate">Certificate.</param>
</member>
<member name="M:Darwinism.IPC.Networking.TcpSocket.SimpleTcpClient.#ctor(System.Net.IPEndPoint,System.Byte[])">
 <summary>
 Instantiates the TCP client with SSL.  
 Set the Connected, Disconnected, and DataReceived callbacks.  Once set, use Connect() to connect to the server.
 </summary>
 <param name="serverIpEndPoint">The server IP endpoint.</param>
 <param name="certificate">Byte array containing the certificate.</param>
</member>
<member name="M:Darwinism.IPC.Networking.TcpSocket.SimpleTcpClient.Dispose">
 <summary>
 Dispose of the TCP client.
 </summary>
</member>
<member name="M:Darwinism.IPC.Networking.TcpSocket.SimpleTcpClient.Connect">
 <summary>
 Establish a connection to the server.
 </summary>
</member>
<member name="M:Darwinism.IPC.Networking.TcpSocket.SimpleTcpClient.ConnectWithRetries(System.Nullable{System.Int32})">
 <summary>
 Establish the connection to the server with retries up to either the timeout specified or the value in Settings.ConnectTimeoutMs.
 </summary>
 <param name="timeoutMs">The amount of time in milliseconds to continue attempting connections.</param>
</member>
<member name="M:Darwinism.IPC.Networking.TcpSocket.SimpleTcpClient.Disconnect">
 <summary>
 Disconnect from the server.
 </summary>
</member>
<member name="M:Darwinism.IPC.Networking.TcpSocket.SimpleTcpClient.DisconnectAsync">
 <summary>
 Disconnect from the server.
 </summary>
</member>
<member name="M:Darwinism.IPC.Networking.TcpSocket.SimpleTcpClient.Send(System.String)">
 <summary>
 Send data to the server.
 </summary>
 <param name="data">String containing data to send.</param>
</member>
<member name="M:Darwinism.IPC.Networking.TcpSocket.SimpleTcpClient.Send(System.Byte[])">
 <summary>
 Send data to the server.
 </summary> 
 <param name="data">Byte array containing data to send.</param>
</member>
<member name="M:Darwinism.IPC.Networking.TcpSocket.SimpleTcpClient.Send(System.Int64,System.IO.Stream)">
 <summary>
 Send data to the server.
 </summary>
 <param name="contentLength">The number of bytes to read from the source stream to send.</param>
 <param name="stream">Stream containing the data to send.</param>
</member>
<member name="M:Darwinism.IPC.Networking.TcpSocket.SimpleTcpClient.SendAsync(System.String,System.Threading.CancellationToken)">
 <summary>
 Send data to the server asynchronously.
 </summary>
 <param name="data">String containing data to send.</param>
 <param name="token">Cancellation token for canceling the request.</param>
</member>
<member name="M:Darwinism.IPC.Networking.TcpSocket.SimpleTcpClient.SendAsync(System.Byte[],System.Threading.CancellationToken)">
 <summary>
 Send data to the server asynchronously.
 </summary> 
 <param name="data">Byte array containing data to send.</param>
 <param name="token">Cancellation token for canceling the request.</param>
</member>
<member name="M:Darwinism.IPC.Networking.TcpSocket.SimpleTcpClient.SendAsync(System.Int64,System.IO.Stream,System.Threading.CancellationToken)">
 <summary>
 Send data to the server asynchronously.
 </summary>
 <param name="contentLength">The number of bytes to read from the source stream to send.</param>
 <param name="stream">Stream containing the data to send.</param>
 <param name="token">Cancellation token for canceling the request.</param>
</member>
<member name="M:Darwinism.IPC.Networking.TcpSocket.SimpleTcpClient.Dispose(System.Boolean)">
 <summary>
 Dispose of the TCP client.
 </summary>
 <param name="disposing">Dispose of resources.</param>
</member>
<member name="T:Darwinism.IPC.Networking.TcpSocket.SimpleTcpClientEvents">
 <summary>
 SimpleTcp client events.
 </summary>
</member>
<member name="E:Darwinism.IPC.Networking.TcpSocket.SimpleTcpClientEvents.Connected">
 <summary>
 Event to call when the connection is established.
 </summary>
</member>
<member name="E:Darwinism.IPC.Networking.TcpSocket.SimpleTcpClientEvents.Disconnected">
 <summary>
 Event to call when the connection is destroyed.
 </summary>
</member>
<member name="E:Darwinism.IPC.Networking.TcpSocket.SimpleTcpClientEvents.DataReceived">
 <summary>
 Event to call when byte data has become available from the server.
 </summary>
</member>
<member name="E:Darwinism.IPC.Networking.TcpSocket.SimpleTcpClientEvents.DataSent">
 <summary>
 Event to call when byte data has been sent to the server.
 </summary>
</member>
<member name="M:Darwinism.IPC.Networking.TcpSocket.SimpleTcpClientEvents.#ctor">
 <summary>
 Instantiate the object.
 </summary>
</member>
<member name="T:Darwinism.IPC.Networking.TcpSocket.SimpleTcpClientSettings">
 <summary>
 SimpleTcp client settings.
 </summary>
</member>
<member name="P:Darwinism.IPC.Networking.TcpSocket.SimpleTcpClientSettings.LocalEndpoint">
 <summary>
 The System.Net.IPEndPoint to which you bind the TCP System.Net.Sockets.Socket.
 </summary>
</member>
<member name="P:Darwinism.IPC.Networking.TcpSocket.SimpleTcpClientSettings.NoDelay">
 <summary>
 Nagle's algorithm.
 Gets or sets a value that disables a delay when send or receive buffers are not full.
 true if the delay is disabled; otherwise, false. The default value is false.
 </summary>
</member>
<member name="P:Darwinism.IPC.Networking.TcpSocket.SimpleTcpClientSettings.StreamBufferSize">
 <summary>
 Buffer size to use while interacting with streams. 
 </summary>
</member>
<member name="P:Darwinism.IPC.Networking.TcpSocket.SimpleTcpClientSettings.ConnectTimeoutMs">
 <summary>
 The number of milliseconds to wait when attempting to connect.
 </summary>
</member>
<member name="P:Darwinism.IPC.Networking.TcpSocket.SimpleTcpClientSettings.ReadTimeoutMs">
 <summary>
 The number of milliseconds to wait when attempting to read before returning null.
 </summary>
</member>
<member name="P:Darwinism.IPC.Networking.TcpSocket.SimpleTcpClientSettings.IdleServerTimeoutMs">
 <summary>
 Maximum amount of time to wait before considering the server to be idle and disconnecting from it. 
 By default, this value is set to 0, which will never disconnect due to inactivity.
 The timeout is reset any time a message is received from the server.
 For instance, if you set this value to 30000, the client will disconnect if the server has not sent a message to the client within 30 seconds.
 </summary>
</member>
<member name="P:Darwinism.IPC.Networking.TcpSocket.SimpleTcpClientSettings.IdleServerEvaluationIntervalMs">
 <summary>
 Number of milliseconds to wait between each iteration of evaluating the server connection to see if the configured timeout interval has been exceeded.
 </summary>
</member>
<member name="P:Darwinism.IPC.Networking.TcpSocket.SimpleTcpClientSettings.ConnectionLostEvaluationIntervalMs">
 <summary>
 Number of milliseconds to wait between each iteration of evaluating the server connection to see if the connection is lost.
 </summary>
</member>
<member name="F:Darwinism.IPC.Networking.TcpSocket.SimpleTcpClientSettings.AcceptInvalidCertificates">
 <summary>
 Enable or disable acceptance of invalid SSL certificates.
 </summary>
</member>
<member name="F:Darwinism.IPC.Networking.TcpSocket.SimpleTcpClientSettings.MutuallyAuthenticate">
 <summary>
 Enable or disable mutual authentication of SSL client and server.
 </summary>
</member>
<member name="F:Darwinism.IPC.Networking.TcpSocket.SimpleTcpClientSettings.UseAsyncDataReceivedEvents">
 <summary>
 Enable or disable whether the data receiver thread fires the DataReceived event from a background task.
 The default is enabled.
 </summary>
</member>
<member name="F:Darwinism.IPC.Networking.TcpSocket.SimpleTcpClientSettings.CheckCertificateRevocation">
 <summary>
 Enable or disable checking certificate revocation list during the validation process.
 </summary>
</member>
<member name="F:Darwinism.IPC.Networking.TcpSocket.SimpleTcpClientSettings.CertificateValidationCallback">
 <summary>
 Delegate responsible for validating a certificate supplied by a remote party.
 </summary>
</member>
<member name="P:Darwinism.IPC.Networking.TcpSocket.SimpleTcpClientSettings.Verbose">
 <summary>
 print and log the verbose debug echo?
 </summary>
 <returns></returns>
</member>
<member name="M:Darwinism.IPC.Networking.TcpSocket.SimpleTcpClientSettings.#ctor">
 <summary>
 Instantiate the object.
 </summary>
</member>
<member name="T:Darwinism.IPC.Networking.TcpSocket.SimpleTcpServer">
 <summary>
 SimpleTcp server with SSL support.  
 Set the ClientConnected, ClientDisconnected, and DataReceived events.  
 Once set, use Start() to begin listening for connections.
 </summary>
 <remarks>
 https://github.com/jchristn/SuperSimpleTcp
 </remarks>
</member>
<member name="P:Darwinism.IPC.Networking.TcpSocket.SimpleTcpServer.IsListening">
 <summary>
 Indicates if the server is listening for connections.
 </summary>
</member>
<member name="P:Darwinism.IPC.Networking.TcpSocket.SimpleTcpServer.Settings">
 <summary>
 SimpleTcp server settings.
 </summary>
</member>
<member name="P:Darwinism.IPC.Networking.TcpSocket.SimpleTcpServer.Events">
 <summary>
 SimpleTcp server events.
 </summary>
</member>
<member name="P:Darwinism.IPC.Networking.TcpSocket.SimpleTcpServer.Statistics">
 <summary>
 SimpleTcp statistics.
 </summary>
</member>
<member name="P:Darwinism.IPC.Networking.TcpSocket.SimpleTcpServer.Keepalive">
 <summary>
 SimpleTcp keepalive settings.
 </summary>
</member>
<member name="P:Darwinism.IPC.Networking.TcpSocket.SimpleTcpServer.Connections">
 <summary>
 Retrieve the number of current connected clients.
 </summary>
</member>
<member name="P:Darwinism.IPC.Networking.TcpSocket.SimpleTcpServer.IpAddress">
 <summary>
 The IP address on which the server is configured to listen.
 </summary>
</member>
<member name="P:Darwinism.IPC.Networking.TcpSocket.SimpleTcpServer.Endpoint">
 <summary>
 The IPEndPoint on which the server is configured to listen.
 </summary>
</member>
<member name="P:Darwinism.IPC.Networking.TcpSocket.SimpleTcpServer.Port">
 <summary>
 The port on which the server is configured to listen.
 </summary>
</member>
<member name="F:Darwinism.IPC.Networking.TcpSocket.SimpleTcpServer.Debugger">
 <summary>
 Method to invoke to send a log message.
 </summary>
</member>
<member name="M:Darwinism.IPC.Networking.TcpSocket.SimpleTcpServer.#ctor(System.String)">
 <summary>
 Instantiates the TCP server without SSL.  Set the ClientConnected, ClientDisconnected, and DataReceived callbacks.  Once set, use Start() to begin listening for connections.
 </summary>
 <param name="ipPort">The IP:port of the server.</param> 
</member>
<member name="M:Darwinism.IPC.Networking.TcpSocket.SimpleTcpServer.#ctor(System.String,System.Int32)">
 <summary>
 Instantiates the TCP server without SSL.  Set the ClientConnected, ClientDisconnected, and DataReceived callbacks.  
 Once set, use Start() to begin listening for connections.
 </summary>
 <param name="listenerIp">The listener IP address or hostname. * means any address</param>
 <param name="port">The TCP port on which to listen.</param>
</member>
<member name="M:Darwinism.IPC.Networking.TcpSocket.SimpleTcpServer.#ctor(System.String,System.Boolean,System.String,System.String)">
 <summary>
 Instantiates the TCP server.  Set the ClientConnected, ClientDisconnected, and DataReceived callbacks.  Once set, use Start() to begin listening for connections.
 </summary>
 <param name="ipPort">The IP:port of the server.</param> 
 <param name="ssl">Enable or disable SSL.</param>
 <param name="pfxCertFilename">The filename of the PFX certificate file.</param>
 <param name="pfxPassword">The password to the PFX certificate file.</param>
</member>
<member name="M:Darwinism.IPC.Networking.TcpSocket.SimpleTcpServer.#ctor(System.String,System.Int32,System.Boolean,System.String,System.String)">
 <summary>
 Instantiates the TCP server.  Set the ClientConnected, ClientDisconnected, and DataReceived callbacks.  Once set, use Start() to begin listening for connections.
 </summary>
 <param name="listenerIp">The listener IP address or hostname.</param>
 <param name="port">The TCP port on which to listen.</param>
 <param name="ssl">Enable or disable SSL.</param>
 <param name="pfxCertFilename">The filename of the PFX certificate file.</param>
 <param name="pfxPassword">The password to the PFX certificate file.</param>
</member>
<member name="M:Darwinism.IPC.Networking.TcpSocket.SimpleTcpServer.#ctor(System.String,System.Int32,System.Byte[])">
 <summary>
 Instantiates the TCP server with SSL.  Set the ClientConnected, ClientDisconnected, and DataReceived callbacks.  Once set, use Start() to begin listening for connections.
 </summary>
 <param name="listenerIp">The listener IP address or hostname.</param>
 <param name="port">The TCP port on which to listen.</param>
 <param name="certificate">Byte array containing the certificate.</param>
</member>
<member name="M:Darwinism.IPC.Networking.TcpSocket.SimpleTcpServer.Dispose">
 <summary>
 Dispose of the TCP server.
 </summary>
</member>
<member name="M:Darwinism.IPC.Networking.TcpSocket.SimpleTcpServer.Start">
 <summary>
 Start accepting connections.
 </summary>
</member>
<member name="M:Darwinism.IPC.Networking.TcpSocket.SimpleTcpServer.StartAsync">
 <summary>
 Start accepting connections.
 </summary>
 <returns>Task.</returns>
</member>
<member name="M:Darwinism.IPC.Networking.TcpSocket.SimpleTcpServer.Stop">
 <summary>
 Stop accepting new connections.
 </summary>
</member>
<member name="M:Darwinism.IPC.Networking.TcpSocket.SimpleTcpServer.GetClients">
 <summary>
 Retrieve a list of client IP:port connected to the server.
 </summary>
 <returns>IEnumerable of strings, each containing client IP:port.</returns>
</member>
<member name="M:Darwinism.IPC.Networking.TcpSocket.SimpleTcpServer.IsConnected(System.String)">
 <summary>
 Determines if a client is connected by its IP:port.
 </summary>
 <param name="ipPort">The client IP:port string.</param>
 <returns>True if connected.</returns>
</member>
<member name="M:Darwinism.IPC.Networking.TcpSocket.SimpleTcpServer.Send(System.String,System.String)">
 <summary>
 Send data to the specified client by IP:port.
 </summary>
 <param name="ipPort">The client IP:port string.</param>
 <param name="data">String containing data to send.</param>
</member>
<member name="M:Darwinism.IPC.Networking.TcpSocket.SimpleTcpServer.Send(System.String,System.Byte[])">
 <summary>
 Send data to the specified client by IP:port.
 </summary>
 <param name="ipPort">The client IP:port string.</param>
 <param name="data">Byte array containing data to send.</param>
</member>
<member name="M:Darwinism.IPC.Networking.TcpSocket.SimpleTcpServer.Send(System.String,System.Int64,System.IO.Stream)">
 <summary>
 Send data to the specified client by IP:port.
 </summary>
 <param name="ipPort">The client IP:port string.</param>
 <param name="contentLength">The number of bytes to read from the source stream to send.</param>
 <param name="stream">Stream containing the data to send.</param>
</member>
<member name="M:Darwinism.IPC.Networking.TcpSocket.SimpleTcpServer.SendAsync(System.String,System.String,System.Threading.CancellationToken)">
 <summary>
 Send data to the specified client by IP:port asynchronously.
 </summary>
 <param name="ipPort">The client IP:port string.</param>
 <param name="data">String containing data to send.</param>
 <param name="token">Cancellation token for canceling the request.</param>
</member>
<member name="M:Darwinism.IPC.Networking.TcpSocket.SimpleTcpServer.SendAsync(System.String,System.Byte[],System.Threading.CancellationToken)">
 <summary>
 Send data to the specified client by IP:port asynchronously.
 </summary>
 <param name="ipPort">The client IP:port string.</param>
 <param name="data">Byte array containing data to send.</param>
 <param name="token">Cancellation token for canceling the request.</param>
</member>
<member name="M:Darwinism.IPC.Networking.TcpSocket.SimpleTcpServer.SendAsync(System.String,System.Int64,System.IO.Stream,System.Threading.CancellationToken)">
 <summary>
 Send data to the specified client by IP:port asynchronously.
 </summary>
 <param name="ipPort">The client IP:port string.</param>
 <param name="contentLength">The number of bytes to read from the source stream to send.</param>
 <param name="stream">Stream containing the data to send.</param>
 <param name="token">Cancellation token for canceling the request.</param>
</member>
<member name="M:Darwinism.IPC.Networking.TcpSocket.SimpleTcpServer.DisconnectClient(System.String)">
 <summary>
 Disconnects the specified client.
 </summary>
 <param name="ipPort">IP:port of the client.</param>
</member>
<member name="M:Darwinism.IPC.Networking.TcpSocket.SimpleTcpServer.Dispose(System.Boolean)">
 <summary>
 Dispose of the TCP server.
 </summary>
 <param name="disposing">Dispose of resources.</param>
</member>
<member name="T:Darwinism.IPC.Networking.TcpSocket.SimpleTcpServerEvents">
 <summary>
 SimpleTcp server events.
 </summary>
</member>
<member name="E:Darwinism.IPC.Networking.TcpSocket.SimpleTcpServerEvents.ClientConnected">
 <summary>
 Event to call when a client connects.
 </summary>
</member>
<member name="E:Darwinism.IPC.Networking.TcpSocket.SimpleTcpServerEvents.ClientDisconnected">
 <summary>
 Event to call when a client disconnects.
 </summary>
</member>
<member name="E:Darwinism.IPC.Networking.TcpSocket.SimpleTcpServerEvents.DataReceived">
 <summary>
 Event to call when byte data has become available from the client.
 </summary>
</member>
<member name="E:Darwinism.IPC.Networking.TcpSocket.SimpleTcpServerEvents.DataSent">
 <summary>
 Event to call when byte data has been sent to a client.
 </summary>
</member>
<member name="M:Darwinism.IPC.Networking.TcpSocket.SimpleTcpServerEvents.#ctor">
 <summary>
 Instantiate the object.
 </summary>
</member>
<member name="T:Darwinism.IPC.Networking.TcpSocket.SimpleTcpServerSettings">
 <summary>
 SimpleTcp server settings.
 </summary>
</member>
<member name="P:Darwinism.IPC.Networking.TcpSocket.SimpleTcpServerSettings.NoDelay">
 <summary>
 Nagle's algorithm.
 Gets or sets a value that disables a delay when send or receive buffers are not full.
 true if the delay is disabled; otherwise, false. The default value is false.
 </summary>
</member>
<member name="P:Darwinism.IPC.Networking.TcpSocket.SimpleTcpServerSettings.StreamBufferSize">
 <summary>
 Buffer size to use while interacting with streams. 
 </summary>
</member>
<member name="P:Darwinism.IPC.Networking.TcpSocket.SimpleTcpServerSettings.IdleClientTimeoutMs">
 <summary>
 Maximum amount of time to wait before considering a client idle and disconnecting them. 
 By default, this value is set to 0, which will never disconnect a client due to inactivity.
 The timeout is reset any time a message is received from a client.
 For instance, if you set this value to 30000, the client will be disconnected if the server has not received a message from the client within 30 seconds.
 </summary>
</member>
<member name="P:Darwinism.IPC.Networking.TcpSocket.SimpleTcpServerSettings.MaxConnections">
 <summary>
 Maximum number of connections the server will accept.
 Default is 4096.  Value must be greater than zero.
 </summary>
</member>
<member name="P:Darwinism.IPC.Networking.TcpSocket.SimpleTcpServerSettings.IdleClientEvaluationIntervalMs">
 <summary>
 Number of milliseconds to wait between each iteration of evaluating connected clients to see if they have exceeded the configured timeout interval.
 </summary>
</member>
<member name="P:Darwinism.IPC.Networking.TcpSocket.SimpleTcpServerSettings.AcceptInvalidCertificates">
 <summary>
 Enable or disable acceptance of invalid SSL certificates.
 </summary>
</member>
<member name="P:Darwinism.IPC.Networking.TcpSocket.SimpleTcpServerSettings.MutuallyAuthenticate">
 <summary>
 Enable or disable mutual authentication of SSL client and server.
 </summary>
</member>
<member name="P:Darwinism.IPC.Networking.TcpSocket.SimpleTcpServerSettings.UseAsyncDataReceivedEvents">
 <summary>
 Enable or disable whether the data receiver thread fires the DataReceived event from a background task.
 The default is enabled.
 </summary>
</member>
<member name="P:Darwinism.IPC.Networking.TcpSocket.SimpleTcpServerSettings.CheckCertificateRevocation">
 <summary>
 Enable or disable checking certificate revocation list during the validation process.
 </summary>
</member>
<member name="P:Darwinism.IPC.Networking.TcpSocket.SimpleTcpServerSettings.CertificateValidationCallback">
 <summary>
 Delegate responsible for validating a certificate supplied by a remote party.
 </summary>
</member>
<member name="P:Darwinism.IPC.Networking.TcpSocket.SimpleTcpServerSettings.PermittedIPs">
 <summary>
 The list of permitted IP addresses from which connections can be received.
 </summary>
</member>
<member name="P:Darwinism.IPC.Networking.TcpSocket.SimpleTcpServerSettings.BlockedIPs">
 <summary>
 The list of blocked IP addresses from which connections will be declined.
 </summary>
</member>
<member name="P:Darwinism.IPC.Networking.TcpSocket.SimpleTcpServerSettings.Verbose">
 <summary>
 print and log the verbose debug echo?
 </summary>
 <returns></returns>
</member>
<member name="M:Darwinism.IPC.Networking.TcpSocket.SimpleTcpServerSettings.#ctor">
 <summary>
 Instantiate the object.
 </summary>
</member>
</members>
</doc>
